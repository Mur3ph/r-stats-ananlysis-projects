demo()
12 + 8
x + 18
x = 32
x + 18
y <- 32
x + y
x <- y <- 32 				#Both x and y are assigned 32
x * y
assign("name_of_variable", 32)
name_of_variable + 1
assign("name_of_variable", 32)
name_of_variable + 1
rm(name_of_variable
name_of_variable + 1
assign("name_of_variable", 32)
name_of_variable + 1
rm(name_of_variable
name_of_variable
rm(name_of_variable
rm(name_of_variable)
assign("name_of_variable", 32)
name_of_variable + 1
rm(name_of_variable)
name_of_variable
a = 32
b = "hello"
class(a)
class(b)
class(c)
c = '12-01-2013'
class(c)
is_numeric(b)
is.numeric(b)
install.packages(c("swirl", "swirlify"))
library(swirlify)
new_lesson("My Lesson", "My Course")
require(rnoaa)
require(lubridate)
require(dplyr)
# The code below is to get data from two weather stations
# The code below is St. Petersburg, FL station
res1 <- isd(usaf="997353", wban="99999", year=2016)
# The code below is Columbia Metropolitan airport
res2 <- isd(usaf="723100", wban="13883", year=2016)
# The code below is to combine the data of the two cities
res_all <- rbind(res1, res2)
# The code below is to combine date and time into a new column
# *Having the date and time together is advantegous
res_all$date_time <- ymd_hm(
sprintf("%s %s", as.character(res_all$date), res_all$time)
)
# The code below is to remove 999, which is for data point not available
res_all <- res_all %>% filter(temperature < 900)
# The code below is subset to date range (15 days more or less)
date1 <- as.Date("2016-07-01")
date2 <- as.Date("2016-07-15")
res_all <- res_all[res_all$date >= date1 & res_all$date <= date2,]
require(rnoaa)
require(lubridate)
require(dp1yr)
# The code below is to get data from two weather stations
# The code below is St. Petersburg, FL station
res1 <- isd(usaf="997353", wban="99999", year=2016)
# The code below is Columbia Metropolitan airport
res2 <- isd(usaf="723100", wban="13883", year=2016)
# The code below is to combine the data of the two cities
res_all <- rbind(res1, res2)
# The code below is to combine date and time into a new column
# *Having the date and time together is advantegous
res_all$date_time <- ymd_hm(
sprintf("%s %s", as.character(res_all$date), res_all$time)
)
# The code below is to remove 999, which is for data point not available
res_all <- res_all %>% filter(temperature < 900)
# The code below is subset to date range (15 days more or less)
date1 <- as.Date("2016-07-01")
date2 <- as.Date("2016-07-15")
res_all <- res_all[res_all$date >= date1 & res_all$date <= date2,]
x1 <- c(1,3, 5, 7, 9)
gender <- c("female", "male")
x1 <- c(1,3, 5, 7, 9)
gender <- c("female", "male")
x2 <- 2:7
x2 <- 2:7
print(x2)
x3 <- seq(from=1, to=7, by=1)
print(x3)
x4 <- seq(from=1, to=7, by=1/3)       #from one to seven in increments of one third
print(x4)
x6 <- rep(1, times=10)                   # Repeat the number one, ten times
print(x6)
x6 <- rep("Bob", times=5)                # Repeat the word Bob, five times
print(x6)
x8 <- rep(1:3, times=5)                  # Repeat the sequence of numbers from 1-3, five times
print(x8)
x9 <- rep(seq(from=2, to=7, by=2.5), times=3)                  # Repeat the sequence of numbers from 1-3, five times
print(x9)
x9 <- rep(seq(from=2, to=7, by=1.2), times=3)                  # Repeat the sequence of numbers from 1-3, five times
print(x9)
x10 <- rep(c("female", "male"), times=3)
print(x10)
x11 <- 1:5
y11 <- c(1, 3, 5, 7, 9)
x11 + 10
x11 - 10
x11 * 10
x11 / 10
x11 + y11
x11 - y11
x11 * y11
x11 / y11
x11 <- 1:5
y11 <- c(1, 3, 5, 7, 9)
x11 + 10
x11 - 10
x11 * 10
x11 / 10
# If two vectors are of the same length we can add, subtract, multiply and divid corresponding elements
x11 + y11
x11 - y11
x11 * y11
x11 / y11
y11[3]
#Retrieves all but third element
y11[-3]
y11[3]
#Retrieves all but third element
y11[-3]
#Retrieves elements from position 1 to 3
y11[1:3]
#Retrieves elements in position 1 and 5
y1[c(1,5)]
#Retrieves elements except position 1 and 5
y1[-c(1,5)]
# Retrieves the third element
y11[3]
#Retrieves all but third element
y11[-3]
#Retrieves elements from position 1 to 3
y11[1:3]
#Retrieves elements in position 1 and 5
y11[c(1,5)]
#Retrieves elements except position 1 and 5
y11[-c(1,5)]
#Retrieves elements only where y is less than 6
y11[y11 < 6]
#Matrices
matrix(c(1,2,3,4,5,6,7,8,9), nrow=3, byrow=TRUE)
my_matrix[1, 2]
my_matrix <- matrix(c(1,2,3,4,5,6,7,8,9), nrow=3, byrow=TRUE) #byrow true sets elements by row and false by column
my_matrix[1, 2]
my_matrix <- matrix(c(1,2,3,4,5,6,7,8,9), nrow=3, byrow=TRUE) #byrow true sets elements by row and false by column
my_matrix <- matrix(c(1,2,3,4,5,6,7,8,9), nrow=3, byrow=TRUE) #byrow true sets elements by row and false by column
print(my_matrix)
my_matrix[1, 2]
my_matrix <- matrix(c(1,2,3,4,5,6,7,8,9), nrow=3, byrow=TRUE) #byrow true sets elements by row and false by column
print(my_matrix)
my_matrix[1, 2]        # Row 1, Column 2
my_matrix[c(1,3), 2]   # Row 1 and 3, Column 2
my_matrix <- matrix(c(1,2,3,4,5,6,7,8,9), nrow=3, byrow=TRUE) #byrow true sets elements by row and false by column
print(my_matrix)
my_matrix[1, 2]        # Row 1, Column 2
my_matrix[c(1,3), 2]   # Row 1 and 3, Column 2
my_matrix[2,]          # Row 2, all Columns
my_matrix <- matrix(c(1,2,3,4,5,6,7,8,9), nrow=3, byrow=TRUE) #byrow true sets elements by row and false by column
print(my_matrix)
my_matrix[1, 2]        # Row 1, Column 2
my_matrix[c(1,3), 2]   # Row 1 and 3, Column 2
my_matrix[2,]          # Row 2, all Columns
my_matrix[,1]          # All rows, Column 1
my_matrix * 10
data1 <- read.csv(file.choose(), header=TRUE)
data1 <- read.csv(file.choose(), header=TRUE)
print(data1)
data1 <- read.csv(file.choose(), header=TRUE)
print(data1)
data1 <- read.csv(file.choose(), header=TRUE)
print(data1)
#Comma seperator
data2 <- read.csv(file.choose(), header=T, sep=",")
print(data2)
#Comma seperator
data2 <- read.csv(file.choose(), header=T, sep=",")
print(data2)
data2 <- read.table(file.choose(), header=T, sep=",")
print(data2)
data3 <- read.delim(file.choose(), header=T)
print(data3)
##Reading from the .TXT file with data seperated by TAB (i.e \t = Tab seperated)
data4 <- read.table(file.choose(), header=T, sep="\t")
print(data4)
data1 <- read.csv(file.choose(), header=TRUE)
print(data1)
data1 <- read.csv(file.choose(), header=TRUE)
print(data1)
print(data4)
help(read.table)
data5 <- read.table(file-"C:/dev/R/workspace/marin-stats-lectures-101/data/Lung/LungCapData.txt", header=TRUE, sep="\t")
print(data5)
data5 <- read.table(file="C:/dev/R/workspace/marin-stats-lectures-101/data/Lung/LungCapData.txt", header=TRUE, sep="\t")
print(data5)
data5 <- read.table(file-"data/Lung/LungCapData.txt", header=TRUE, sep="\t")
# data5 <- read.table(file="C:/dev/R/workspace/marin-stats-lectures-101/data/Lung/LungCapData.txt", header=TRUE, sep="\t")
print(data5)
LungCapData <- read.delim("C:/dev/R/workspace/marin-stats-lectures-101/data/Lung/LungCapData.txt")
View(LungCapData)
dim(LungCapData)
head(LungCapData) # First 6 rows
LungCapData[c(5, 6, 7, 11, 44), ]
LungCapData[63:67, ]
LungCapData[c-(5:723), ]
LungCapData[-(5:723), ]
names(LungCapData)
LungCapData <- read.delim("C:/dev/R/workspace/marin-stats-lectures-101/data/Lung/LungCapData.txt")
View(LungCapData)
names(LungCapData)
mean(Age)
mean(LungCapData$Age)
attach(LungCapData$Age)
attach(LungCapData)
Age
detach(LungCapData)
Age
names(LungCapData)
class(LungCap)                     # Class function tells use what type of data is in our variables / column names
class(Age)
class(Height)
attach(LungCapData)
class(LungCap)                     # Class function tells use what type of data is in our variables / column names
class(Age)
class(Height)
names(LungCapData)
class(LungCap)                     # Class function tells use what type of data is in our variables / column names
class(Age)
class(Height)
class(Smoke)
class(Gender)
class(Caesarean)
levels(Smoke)
levels(Gender)
levels(Caesarean)
summary(LungCapData)
# Test
x <- c(0,1,1,1,0,0,0,0,0,0)
class(x)
summary(x)
# Test
x <- c(0,1,1,1,0,0,0,0,0,0)
class(x)
summary(x)
x <- as.factor(x)
class(x)
summary(x)
Age[11:14]
attach(LungCapData)
Age[11:14]
LungCapData[11:14,]
mean(Age[Gender=="female"])
#Get the Mean Age where Gender is equal to male
#Get the Mean Age where Gender is equal to male
mean(Age[Gender=="male"])
female <- LungCapData[Gender=="female", ]
female <- LungCapData[Gender=="female", ]
male <- LungCapData[Gender=="male", ]
dim(female)
dim(male)
dim(female)
dim(male)
summary(Gender)
female[1:4, ]
maleOver15 <- LungCapData[Gender=="male" & Age > 15, ]
dim(maleOver15)
maleOver15[1:4, ]
head(LungCapData)
Age[1:5]
attach(LungCapData)
Age[1:5]
temp-age <- Age[1:5]
tempAge <- Age>15                  #
tempAge[1:5]
Age[1:5]
tempAge <- Age>15                  # True if
tempAge[1:5]
Age[1:5]
isAgeGreaterThan15 <- Age>15                  # Store True in 'isAgeGreaterThan15' if Age is over 15 otherwise False
isAgeGreaterThan15[1:5]
isAgeGreaterThan15_One <- Age>15                  # Store True in 'isAgeGreaterThan15' if Age is over 15 otherwise False
Age[1:5]
isAgeGreaterThan15_One[1:5]
isAgeGreaterThan15_Two <- as.numeric(Age>15)      # Store '1' in 'isAgeGreaterThan15' if Age is over 15 otherwise '0'
Age[1:5]
isAgeGreaterThan15_Two[1:5]
isFemaleSmoke <- Gender == "female" & Smoke == "yes"
isFemaleSmoke[1:5]
isFemaleSmoke_One <- Gender == "female" & Smoke == "yes"
isFemaleSmoke_Two <- as.numeric(Gender == "female" & Smoke == "yes")
isFemaleSmoke_One[1:5]
isFemaleSmoke_Two[1:5]
rm(list=ls())
# Column Bind = cbind
MoreData <- cbind(LungCapData, isFemaleSmoke_One)
MoreData[1:5]
#Youtube videos with MarinStatsLectures - NEXT IS LECTURE 9
LungCapData <- read.delim("C:/dev/R/workspace/marin-stats-lectures-101/data/Lung/LungCapData.txt")
attach(LungCapData)                # First we have to 'attach' the data which stores it in R's memory
Age                                # Now I can call the variables/column names without the dollar sign
head(LungCapData)
isAgeGreaterThan15_One <- Age>15                  # Store True in 'isAgeGreaterThan15' if Age is over 15 otherwise False
Age[1:5]
isAgeGreaterThan15_One[1:5]
isAgeGreaterThan15_Two <- as.numeric(Age>15)      # Store '1' in 'isAgeGreaterThan15' if Age is over 15 otherwise '0'
Age[1:5]
isAgeGreaterThan15_Two[1:5]
LungCapData[1:5, ]
isFemaleSmoke_One <- Gender == "female" & Smoke == "yes"
isFemaleSmoke_Two <- as.numeric(Gender == "female" & Smoke == "yes")
isFemaleSmoke_One[1:5]
isFemaleSmoke_Two[1:5]
# Column Bind = cbind
MoreData <- cbind(LungCapData, isFemaleSmoke_One)
MoreData[1:5]
# Column Bind = cbind
MoreData <- cbind(LungCapData, isFemaleSmoke_One)
MoreData[1:5, ]
#Youtube videos with MarinStatsLectures - NEXT IS LECTURE 10
LungCapData <- read.delim("C:/dev/R/workspace/marin-stats-lectures-101/data/Lung/LungCapData.txt")
attach(LungCapData)                # First we have to 'attach' the data which stores it in R's memory
Age                                # Now I can call the variables/column names without the dollar sign
head(LungCapData)
isAgeGreaterThan15_One <- Age>15                  # Store True in 'isAgeGreaterThan15' if Age is over 15 otherwise False
Age[1:5]
isAgeGreaterThan15_One[1:5]
isAgeGreaterThan15_Two <- as.numeric(Age>15)      # Store '1' in 'isAgeGreaterThan15' if Age is over 15 otherwise '0'
Age[1:5]
isAgeGreaterThan15_Two[1:5]
LungCapData[1:5, ]
isFemaleSmoke_One <- Gender == "female" & Smoke == "yes"
isFemaleSmoke_Two <- as.numeric(Gender == "female" & Smoke == "yes")
isFemaleSmoke_One[1:5]
isFemaleSmoke_Two[1:5]
# Adding another column to the dataset. Column Bind = cbind
MoreData <- cbind(LungCapData, isFemaleSmoke_One)
MoreData[1:5, ]
# Remove all stored objects in R Studio cache. Remove from workspace
rm(list=ls())
# Remove all stored objects in R Studio cache. Remove from workspace
rm(list=ls())
# Adding another column to the dataset. Column Bind = cbind
MoreData <- cbind(LungCapData, isFemaleSmoke_One)
MoreData[1:5, ]
LungCapData <- read.delim("C:/dev/R/workspace/marin-stats-lectures-101/data/Lung/LungCapData.txt")
attach(LungCapData)
isFemaleSmoke_One <- Gender == "female" & Smoke == "yes"
isFemaleSmoke_Two <- as.numeric(Gender == "female" & Smoke == "yes")
isFemaleSmoke_One[1:5]
isFemaleSmoke_Two[1:5]
# Adding another column to the dataset. Column Bind = cbind
MoreData <- cbind(LungCapData, isFemaleSmoke_One)
MoreData[1:5, ]
getwd()
getwd()
setwd("C:/dev/R/workspace")
getwd()
# Remove all stored objects in R Studio cache. Remove from workspace
rm(list=ls())
#To load an R script
load("marin-stats-lectures-101/basics-4-logic.r")
#To load an R script
load("/marin-stats-lectures-101/basics-4-logic.r")
setwd("C:/dev/R/workspace")
load("marin-stats-lectures-101/basics-4-logic.r")
setwd("C:/dev/R/workspace/marin-stats-lectures-101/")
getwd()
load("basics-4-logic.r")
load("basics-5.r")
save.image("basics-5-test.Rdata")
load("basics-5-test.Rdata")
load("C:/dev/R/workspace/marin-stats-lectures-101/basics-5.RData")
load("C:/dev/R/workspace/marin-stats-lectures-101/basics-5.RData")
load("C:/dev/R/workspace/marin-stats-lectures-101/basics.RData")
# Save this file as .RData 'image' when loading the file like below with the load() function
#Youtube videos with MarinStatsLectures - NEXT IS LECTURE 11
LungCapData <- read.delim("C:/dev/R/workspace/marin-stats-lectures-101/data/Lung/LungCapData.txt")
attach(LungCapData)
#Below code gets the directory we are working on (i.e. getwd() = get working directory)
#getwd()
#setwd("C:/dev/R/workspace/marin-stats-lectures-101/")
meanAge <- mean(Age)
x <- c(1,2,3,4,5)
y <- 14
# Just to show we can use the equal sign and <- to assign data to a variable
z = summary(LungCapData)
# Save this file as .RData 'image' when loading the file like below with the load() function
save.image("basics-5-test.Rdata")
#To load an R script
load("basics-5-test.Rdata")
rm(list=ls())
